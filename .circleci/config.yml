version: 2 # use CircleCI 2.0
jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    working_directory: ~/repo # directory where steps will run

    docker: # run the steps with Docker
      - image: circleci/openjdk:11-jdk
      
    steps:
      - checkout # check out source code to working directory
      - run: |
          mvn deploy -s .circleci/conf/settings.xml -T 1.5C deploy
          cp dexels-felix-war/target/*.war dexels-felix-war/target/dexels-felix.war
      - store_artifacts: # store the uberjar as an artifact
          path: dexels-felix-war/target/dexels-felix.war
          destination: dexels-felix.war
      - persist_to_workspace:
          root: ~/repo
          paths:
            - Dockerfile
            - dexels-felix-war/
            - dexels-felix-bridge/
            - dexels-felix-super/

  package_dexels_war_container:
    working_directory: ~/repo # directory where steps will run
    machine:
      image: circleci/classic:edge
    steps:
      - attach_workspace:
          at: ~/repo
      - run: |
          ls -lR
          docker --version
          docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run: |
          TAG=${MINORTAG}.$CIRCLE_BUILD_NUM
          docker build --build-arg TAG=${MINORTAG}.${BASE_VERSION} -t dexels/dexels-war:$TAG -t dexels/dexels-war:latest .
          docker push dexels/dexels-war:$TAG
          docker push dexels/dexels-war:latest
  package_navajo_war:
    working_directory: ~/repo # directory where steps will run
    machine:
      image: circleci/classic:edge
    steps:
      - run: |
          trap 'rc=$?; echo "error code $rc at $LINENO"; exit $rc' ERR
          mkdir -p target
          mkdir -p navajo
          mkdir -p enterprise
          mkdir -p war
          BASE_VERSION=$(curl -s "https://circleci.com/api/v1.1/project/github/Dexels/dexels-base?circle-token=${CIRCLE_TOKEN}&limit=10&offset=0&filter=successful" | jq '.[] | select(.workflows.job_name == "build") | .build_num ' |head -n 1)
          NAVAJO_VERSION=$(curl -s "https://circleci.com/api/v1.1/project/github/Dexels/navajo?circle-token=${CIRCLE_TOKEN}&limit=10&offset=0&filter=successful" | jq '.[] | .build_num ' |head -n 1)
          ENTERPRISE_VERSION=$(curl -s "https://circleci.com/api/v1.1/project/github/Dexels/enterprise?circle-token=${CIRCLE_TOKEN}&limit=10&offset=0&filter=successful" | jq '.[] | .build_num ' |head -n 1)
          FELIX_WAR_VERSION=$(curl -s "https://circleci.com/api/v1.1/project/github/Dexels/dexels-felix-bridge-war?circle-token=${CIRCLE_TOKEN}&limit=10&offset=0&filter=successful" | jq '.[] | select(.workflows.job_name == "build") | .build_num ' |head -n 1)
          echo "Base version $BASE_VERSION Navajo: $NAVAJO_VERSION Enterprise versiom: $ENTERPRISE_VERSION Felix war version: $FELIX_WAR_VERSION"
          curl -s https://${BASE_VERSION}-190362472-gh.circle-artifacts.com/0/dexels-base.tgz?circle-token=${CIRCLE_TOKEN} >target/base.tgz
          curl -s https://${ENTERPRISE_VERSION}-4423339-gh.circle-artifacts.com/0/enterprise_p2.zip?circle-token=${CIRCLE_TOKEN} >enterprise/enterprise.zip
          curl -s https://${NAVAJO_VERSION}-4423334-gh.circle-artifacts.com/0/navajo_p2.zip?circle-token=${CIRCLE_TOKEN} >navajo/navajo.zip
          curl -s https://${FELIX_WAR_VERSION}-192688421-gh.circle-artifacts.com/0/dexels-felix.war?circle-token=${CIRCLE_TOKEN} >war/dexels-felix.war
          tar xfz target/base.tgz -C target
          rm target/base.tgz
          cd navajo
          unzip navajo.zip -d .
          rm navajo.zip
          cd ../enterprise
          unzip enterprise.zip -d .
          rm enterprise.zip
          cd ..
          cd war
          unzip dexels-felix.war
          cd ..
          echo "Collecting bundles"
          mv navajo/plugins/*.jar target/bundle/
          mv enterprise/plugins/*.jar target/bundle/
          rm -rf navajo
          rm -rf enterprise
          echo "Cleaned up folder"
          ls -lR
          #find target/bundle -name *swift* | xargs rm
          echo "Removed swift"
          find target/bundle -name *gogo* | xargs rm
          echo "Removed gogo"
          find target/bundle -name *.tar.gz | xargs rm
          echo "Removed tar.gz"
          find target/bundle -name *jetty* | xargs rm
          echo "Removed jetty"
          find target/bundle -name *pax-web* | xargs rm
          echo "Removed pax web"
          find target/bundle -name *websocket* | xargs rm
          echo "Removed websocket"
          find target/bundle -name *jgit* | xargs rm
          echo "Removed jgit"
          find target/bundle -name *repository.git* | xargs rm
          echo "Removed repository.git"
          cp target/bundle/* war/WEB-INF/bundles/
          echo "Removed unwanted bundles"
          cd war
          zip -r navajo-felix.war META-INF/* WEB-INF/*
          cd ..
      - store_artifacts: # store the uberjar as an artifact
          path: war/navajo-felix.war
          destination: navajo-felix.war

workflows:
  version: 2
  workflow:
    jobs:
      - build
      - package_dexels_war_container:
          requires:
            - build
      - package_navajo_war:
          requires:
            - build
